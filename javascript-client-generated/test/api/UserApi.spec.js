/*
 * Swagger store
 * This is a modified sample Petstore server.  You can find  out more about Swagger at  [http://swagger.io](http://swagger.io) or on  [irc.freenode.net, #swagger](http://swagger.io/irc/). 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SwaggerStore);
  }
}(this, function(expect, SwaggerStore) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SwaggerStore.UserApi();
  });

  describe('(package)', function() {
    describe('UserApi', function() {
      describe('addProduct', function() {
        it('should call addProduct successfully', function(done) {
          // TODO: uncomment, update parameter values for addProduct call
          /*
          var body = new SwaggerStore.Product();
          body.id = "0";
          body.category = new SwaggerStore.Category();
          body.category.id = "0";
          body.category.name = "";
          body.title = "Lamp to sell";
          body.location = "London";
          body.photoUrls = [""];
          body.tags = [new SwaggerStore.Tag()];
          body.tags[0].id = "0";
          body.tags[0].name = "";
          body.shipping = "shipping";

          instance.addProduct(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createUser', function() {
        it('should call createUser successfully', function(done) {
          // TODO: uncomment, update parameter values for createUser call
          /*
          var body = new SwaggerStore.User();
          body.id = "0";
          body.username = "";
          body.firstName = "";
          body.lastName = "";
          body.email = "";
          body.password = "";
          body.phone = "";
          body.adress = "";
          body.userStatus = 0;

          instance.createUser(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteProduct', function() {
        it('should call deleteProduct successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteProduct call
          /*
          var productId = 789;
          var opts = {};
          opts.apiKey = "apiKey_example";

          instance.deleteProduct(productId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteUser', function() {
        it('should call deleteUser successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteUser call
          /*
          var username = "username_example";

          instance.deleteUser(username, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('findProductsByTags', function() {
        it('should call findProductsByTags successfully', function(done) {
          // TODO: uncomment, update parameter values for findProductsByTags call and complete the assertions
          /*
          var tags = ["tags_example"];

          instance.findProductsByTags(tags, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SwaggerStore.Product);
              expect(data.id).to.be.a('number');
              expect(data.id).to.be("0");
              expect(data.category).to.be.a(SwaggerStore.Category);
                    expect(data.category.id).to.be.a('number');
                expect(data.category.id).to.be("0");
                expect(data.category.name).to.be.a('string');
                expect(data.category.name).to.be("");
              expect(data.title).to.be.a('string');
              expect(data.title).to.be("Lamp to sell");
              expect(data.location).to.be.a('string');
              expect(data.location).to.be("London");
              {
                let dataCtr = data.photoUrls;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              {
                let dataCtr = data.tags;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SwaggerStore.Tag);
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be("0");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                }
              }
              expect(data.shipping).to.be.a('string');
              expect(data.shipping).to.be("shipping");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getProductById', function() {
        it('should call getProductById successfully', function(done) {
          // TODO: uncomment, update parameter values for getProductById call and complete the assertions
          /*
          var productId = 789;

          instance.getProductById(productId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SwaggerStore.Product);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            expect(data.category).to.be.a(SwaggerStore.Category);
                  expect(data.category.id).to.be.a('number');
              expect(data.category.id).to.be("0");
              expect(data.category.name).to.be.a('string');
              expect(data.category.name).to.be("");
            expect(data.title).to.be.a('string');
            expect(data.title).to.be("Lamp to sell");
            expect(data.location).to.be.a('string');
            expect(data.location).to.be("London");
            {
              let dataCtr = data.photoUrls;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SwaggerStore.Tag);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
              }
            }
            expect(data.shipping).to.be.a('string');
            expect(data.shipping).to.be("shipping");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getUserByName', function() {
        it('should call getUserByName successfully', function(done) {
          // TODO: uncomment, update parameter values for getUserByName call and complete the assertions
          /*
          var username = "username_example";

          instance.getUserByName(username, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SwaggerStore.User);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            expect(data.username).to.be.a('string');
            expect(data.username).to.be("");
            expect(data.firstName).to.be.a('string');
            expect(data.firstName).to.be("");
            expect(data.lastName).to.be.a('string');
            expect(data.lastName).to.be("");
            expect(data.email).to.be.a('string');
            expect(data.email).to.be("");
            expect(data.password).to.be.a('string');
            expect(data.password).to.be("");
            expect(data.phone).to.be.a('string');
            expect(data.phone).to.be("");
            expect(data.adress).to.be.a('string');
            expect(data.adress).to.be("");
            expect(data.userStatus).to.be.a('number');
            expect(data.userStatus).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('loginUser', function() {
        it('should call loginUser successfully', function(done) {
          // TODO: uncomment, update parameter values for loginUser call and complete the assertions
          /*
          var username = "username_example";
          var password = "password_example";

          instance.loginUser(username, password, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('string');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('logoutUser', function() {
        it('should call logoutUser successfully', function(done) {
          // TODO: uncomment logoutUser call
          /*

          instance.logoutUser(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateProduct', function() {
        it('should call updateProduct successfully', function(done) {
          // TODO: uncomment, update parameter values for updateProduct call
          /*
          var body = new SwaggerStore.Product();
          body.id = "0";
          body.category = new SwaggerStore.Category();
          body.category.id = "0";
          body.category.name = "";
          body.title = "Lamp to sell";
          body.location = "London";
          body.photoUrls = [""];
          body.tags = [new SwaggerStore.Tag()];
          body.tags[0].id = "0";
          body.tags[0].name = "";
          body.shipping = "shipping";

          instance.updateProduct(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateProductWithForm', function() {
        it('should call updateProductWithForm successfully', function(done) {
          // TODO: uncomment, update parameter values for updateProductWithForm call
          /*
          var productId = 789;
          var opts = {};
          opts.name = "name_example";
          opts.status = "status_example";

          instance.updateProductWithForm(productId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateUser', function() {
        it('should call updateUser successfully', function(done) {
          // TODO: uncomment, update parameter values for updateUser call
          /*
          var username = "username_example";
          var body = new SwaggerStore.User();
          body.id = "0";
          body.username = "";
          body.firstName = "";
          body.lastName = "";
          body.email = "";
          body.password = "";
          body.phone = "";
          body.adress = "";
          body.userStatus = 0;

          instance.updateUser(username, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('uploadFile', function() {
        it('should call uploadFile successfully', function(done) {
          // TODO: uncomment, update parameter values for uploadFile call and complete the assertions
          /*
          var productId = 789;
          var opts = {};
          opts.additionalMetadata = "additionalMetadata_example";
          opts.file = "/path/to/file.txt";

          instance.uploadFile(productId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SwaggerStore.ApiResponse);
            expect(data.code).to.be.a('number');
            expect(data.code).to.be(0);
            expect(data.type).to.be.a('string');
            expect(data.type).to.be("");
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
